// schema.prisma - RAG Agro API

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============= DOCUMENTOS =============

model Document {
  id            String   @id @default(cuid())
  filename      String
  originalName  String
  filepath      String
  mimeType      String
  size          Int
  documentType  DocumentType
  status        DocumentStatus @default(PROCESSING)

  // Metadatos extraídos
  metadata      String?  // JSON como string en SQLite
  textContent   String?  // Texto extraído completo
  pageCount     Int?

  // Control de versión
  version       Int      @default(1)
  isTemporary   Boolean  @default(false)

  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  processedAt   DateTime?
  expiresAt     DateTime? // Para documentos temporales

  // Relaciones
  chunks        DocumentChunk[]
  conversations Conversation[]
  userId        String?

  @@index([documentType])
  @@index([status])
  @@index([isTemporary])
  @@index([createdAt])
}

model DocumentChunk {
  id            String   @id @default(cuid())
  documentId    String
  document      Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  content       String
  chunkIndex    Int

  // Metadatos del chunk
  pageNumber    Int?
  startChar     Int?
  endChar       Int?
  metadata      String?  // JSON como string en SQLite

  // Vector embedding (referencia, el vector real está en ChromaDB)
  embeddingId   String?  // ID en el vector store

  createdAt     DateTime @default(now())

  @@index([documentId])
  @@index([embeddingId])
}

enum DocumentType {
  CONTRACT
  PURCHASE_ORDER
  INVOICE
  SALES_RECORD
  OTHER
}

enum DocumentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// ============= CONVERSACIONES =============

model Conversation {
  id            String   @id @default(cuid())
  title         String?
  status        ConversationStatus @default(ACTIVE)

  // Contexto
  systemPrompt  String?

  // Documentos asociados (contexto permanente o temporal)
  documents     Document[]

  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastMessageAt DateTime?

  // Relaciones
  messages      Message[]
  userId        String?

  @@index([status])
  @@index([createdAt])
  @@index([lastMessageAt])
}

model Message {
  id              String   @id @default(cuid())
  conversationId  String
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  role            MessageRole
  content         String

  // Metadatos RAG
  sources         String?  // JSON como string en SQLite
  confidence      Float?
  tokensUsed      Int?

  // Metadatos de visualización (para frontend)
  chartData       String?  // JSON como string en SQLite
  tableData       String?  // JSON como string en SQLite

  createdAt       DateTime @default(now())

  @@index([conversationId])
  @@index([createdAt])
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum ConversationStatus {
  ACTIVE
  ARCHIVED
  DELETED
}

// ============= USUARIOS (OPCIONAL) =============

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?

  // Preferencias
  preferences   String?  // JSON como string en SQLite

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// ============= ANALYTICS & CACHE (OPCIONAL) =============

model QueryCache {
  id            String   @id @default(cuid())
  queryHash     String   @unique
  query         String
  response      String   // JSON como string en SQLite

  hitCount      Int      @default(1)

  createdAt     DateTime @default(now())
  expiresAt     DateTime

  @@index([queryHash])
  @@index([expiresAt])
}