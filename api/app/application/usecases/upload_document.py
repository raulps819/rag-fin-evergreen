"""
Upload document use case.
"""
from datetime import datetime
from typing import List, Dict, Any

from app.domain.entities.document import Document
from app.domain.ports.document_repository import DocumentRepositoryPort
from app.domain.ports.vector_store import VectorStorePort
from app.infrastructure.document_processor import DocumentProcessor
from app.infrastructure.llm.openai_embedding import OpenAIEmbeddingService
from app.core.config import settings


class UploadDocumentUseCase:
    """
    Use case for uploading and processing documents.
    """

    def __init__(
        self,
        document_repository: DocumentRepositoryPort,
        vector_store: VectorStorePort,
        embedding_service: OpenAIEmbeddingService,
        document_processor: DocumentProcessor
    ):
        self.document_repository = document_repository
        self.vector_store = vector_store
        self.embedding_service = embedding_service
        self.document_processor = document_processor

    async def execute(
        self,
        filename: str,
        file_content: bytes,
        file_type: str,
        is_temporary: bool = False
    ) -> Document:
        """
        Execute the upload document use case.

        Args:
            filename: Name of the file
            file_content: File content as bytes
            file_type: File extension
            is_temporary: Whether the document is temporary

        Returns:
            Created document entity
        """
        # Step 1: Extract text from document
        text = await self.document_processor.extract_text(file_content, file_type)

        if not text:
            raise ValueError("No text could be extracted from the document")

        # Step 2: Split text into chunks
        chunks = self.document_processor.chunk_text(
            text,
            chunk_size=settings.CHUNK_SIZE,
            overlap=settings.CHUNK_OVERLAP
        )

        if not chunks:
            raise ValueError("No chunks could be created from the document")

        # Step 3: Generate embeddings
        embeddings = await self.embedding_service.generate_embeddings(chunks)

        # Step 4: Create document entity
        document = Document(
            id=None,  # Will be generated by repository
            filename=filename,
            file_type=file_type,
            chunk_count=len(chunks),
            upload_date=datetime.now(),
            is_temporary=is_temporary
        )

        # Step 5: Save document metadata to database
        document_id = await self.document_repository.save(document)
        document.id = document_id

        # Step 6: Prepare metadata for each chunk
        metadata: List[Dict[str, Any]] = [
            {
                "document_id": document_id,
                "chunk_index": i,
                "filename": filename,
                "file_type": file_type
            }
            for i in range(len(chunks))
        ]

        # Step 7: Store chunks and embeddings in vector store
        await self.vector_store.add_chunks(
            document_id=document_id,
            chunks=chunks,
            embeddings=embeddings,
            metadata=metadata
        )

        return document